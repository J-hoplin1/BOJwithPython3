'''
이진검색(Binary Search)

이진검색을 사용하려면 배열의 데이터가 정렬(sort) 되어있어야 한다.
이진검색은 선형검색에 비해서 빠르게 검색할 수 있다.

예를 들어 [0,1,2,3,4,5,6,7,8,9,10] 이라는 리스트가 있다고 가정하자.

여기서 7의 값을 찾고싶다는 가정을 하자.

우선 저 리스트의 중간 인덱스에 해당하는 인덱스 5번(실제값 5)값은 찾으려는 값인 7보다 더 작다.
그렇기 때문에 검색 범위를 인덱스 5보다 한칸 더 오른쪽인 인덱스 6번부터 끝까지로 좁힐 수 있다.

6~10인덱스에서 중간값은 인덱스 8이다. 이 인덱스 8에 대한 실제값은 찾으려는 값인 7보다 더 크기 때문에
결론적으로 검색범위를 인덱스 6부터 인덱스 8보다 1 작은 인덱스 7로 좁힐 수 있는것이다.

이러한 과정으로 검색범위를 좁혀가면서 검색을 하는것이 이진검색 방법이다.

이진검색은 범위가 거의 절반으로 줄어드므로 검색에 필요한 비교횟수는 평균적으로 logn이다. 검색에 실패할 경우에는 |log(n+1)|번이며, 성공할 경우에는 logn - 1번이다.


'''

from typing import Any, Sequence

def binSearch(a : Sequence, key : Any) -> int:
    
    pl = 0 #검색범위 첫번째 인덱스
    pr = len(a) - 1 #검색범위 마지막 인덱스
    
    while True:
        pc = (pl + pr) // 2 #검색범위의 중간 인덱스 값
        if a[pc] == key:
            return pc
        elif a[pc] < key:
            pl = pc + 1 #중간 인덱스의 실제값이 키값보다 작은 경우 중간 인덱스 + 1 부터 끝까지로 검색범위를 줄 일 수 있다. 
        else:
            pr = pc - 1 #중간 인덱스의 실제값이 키값보다 큰 경우 검색범위 시작 인덱스부터  중간 인덱스 - 1까지 검색범위를 줄일 수 있다. 
        if pl > pr: 
            break
            return -1
            
if __name__=="__main__":
    num = int(input('원소 수를 입력하세요 : '))
    x = [None] * num
    
    for t in range(num):
        x[t] = int(input(f'x[{t}] : '))
    
    x.sort() #sequence x를 오름차순으로 정렬한다.
    
    key = int(input("검색하고자 하는 값 입력하기 : "))
    idx = binSearch(x,key)
    if idx == -1:
        print("찾으려는 원소가 존재하지 않습니다.")
    else:
        print(f"검색값은 x[{idx}]에 있습니다.")
    